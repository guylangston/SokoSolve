@using SokoSolve.Core.Common
@using SokoSolve.Core.Solver
@using TextRenderZ.Reporting
@using System.Collections.Concurrent
@using System.Runtime.CompilerServices
@using Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
@model SokoSolve.Client.Web.Controllers.PuzzleController.SolverModel
@{
    var stats = new List<SolverStatistics>();
    if (Model.State != null)
    {
        stats.Add(Model.State.Statistics);
        if (Model.State is MultiThreadedSolverState mm)
        {
            stats.AddRange(mm.StatsInner);
        }
    }
    
}

<div class="row">
    <div class="col-4">
        <h1>@Model.Puzzle.Ident @Model.Puzzle.Name</h1>
        <partial name="PuzzleMap" model="@Model.Puzzle.Puzzle"/>
        @if (!Model.IsFinished)
        {
            <h2 style="color: green;">Running</h2>
        }
        
        @if (Model.State != null)
        {
            <dl>
                <dt>Elapsed</dt>
                <dd>@Model.State.Statistics.Elapsed.Humanize()</dd>
            
                <dt>Exit Conditions</dt>
                <dd>@Model.Command.ExitConditions</dd>
            </dl>

            <hr/>
            <div style="background-color: aliceblue">
                <h2>
                    Status: @Model.State.Exit @Model.State.ExitDescription 
                </h2>
                @Model.State.Statistics
            </div>
            
            @if (Model.State.HasSolution)
            {
                if (Model.State.SolutionsNodes.Any())
                {
                    <h3>Solution Nodes</h3>
                    <ul>
                        @foreach (var node in Model.State.SolutionsNodes)
                        {
                            <li><a asp-action="SolveNode" asp-route-id="@Model.Puzzle.Ident" asp-route-token="@Model.Token" asp-route-nodeid="@node.SolverNodeId">@node.GetHashCode()</a></li>  
                        }
                
                    </ul>    
                }

                if (Model.State.Solutions.Any())
                {
                    <h3>Solution Paths</h3>
                    <ul>
                        @foreach (var path in Model.State.Solutions)
                        {
                            <li title="@path.ToString()">@path.Description, @path.Count steps (@path.NodeDepthFwd + @path.NodeDepthRev = @path.NodeDepth)</li>
                        }
                    </ul>    
                }
                
                
                
                
            }
        
        }        
       
        
        <h4>Tools</h4>
        <ul>
            <li><a asp-action="RunningSolverReport" asp-route-id="@Model.Puzzle.Ident" asp-route-token="@Model.Token" >Report</a></li>
            <li><a asp-action="Workers" asp-route-id="@Model.Puzzle.Ident" asp-route-token="@Model.Token" >Workers</a></li>
        </ul>
        
        

      
        <h4>Explore Tree</h4>
        <ul>
           @if (Model.RootForward != null)
           {
               <li><a asp-action="SolveNode" asp-route-id="@Model.Puzzle.Ident" asp-route-token="@Model.Token" asp-route-nodeid="">Root Node</a></li>  
           }
           @if (Model.RootReverse != null)
           {
               <li><a asp-action="SolveNode" asp-route-id="@Model.Puzzle.Ident" asp-route-token="@Model.Token" asp-route-nodeid="-1">Root Node (Reverse)</a></li>    
           }
           

        </ul>
        
        
        
        
        <div>
            @if (Model.State is MultiThreadedSolverState multi)
            {
                <ul>
                    @if (multi.PoolForward is ConcurrentQueue<SolverNode> cc && cc.TryPeek(out var peek))
                    {
                        <li><a asp-action="SolveNode" asp-route-id="@Model.Puzzle.Ident" asp-route-token="@Model.Token" asp-route-nodeid="@peek.SolverNodeId">Peek</a></li>    
                    }
                </ul>

                
    MapToReporting.Create<MultiThreadedSolverState>()
                  .AddColumn("Workers", x=>x.Workers?.Count)
                  .AddColumn("Stats Inner", x=>x.StatsInner?.Count)
                  .AddColumn("Is Running", x=>x.IsRunning)
                  .AddColumn("Pool Reverse", x=>x.PoolReverse?.TypeDescriptor)
                  .AddColumn("Pool Forward", x=>x.PoolForward?.TypeDescriptor)
                  .AddColumn("Queue Forward", x=>x.QueueForward?.TypeDescriptor)
                  .AddColumn("Queue Reverse", x=>x.QueueReverse?.TypeDescriptor)
                  .AddColumn("Queue Forward", x=>x.QueueForward?.Statistics)
                  .AddColumn("Queue Reverse", x=>x.QueueReverse?.Statistics)
                  .AddColumn("Root Reverse", x=>x.RootReverse)
                  .AddColumn("Root", x=>x.Root)
                  .AddColumn("Queue", x=>x.Queue)
                  .AddColumn("Pool", x=>x.Pool)
                  .AddColumn("Evaluator", x=>x.Evaluator)
                  .AddColumn("PeekOnTick", x=>x.PeekOnTick)
                  //.AddColumn("Command", x=>x.Command)
                  .AddColumn("Statistics", x=>x.Statistics)
                  //.AddColumn("Static Maps", x=>x.StaticMaps)
                  .AddColumn("Exception", x=>x.Exception)
                  .AddColumn("Early Exit", x=>x.EarlyExit)
                  .AddColumn("Exit Description", x=>x.ExitDescription)
                  .AddColumn("Solutions Nodes", x=>x.SolutionsNodes?.Count)
                  .AddColumn("Solutions Nodes Reverse", x=>x.SolutionsNodesReverse?.Count)
                  .AddColumn("Solutions", x=>x.Solutions?.Count)
                  .AddColumn("Solutions Invalid", x=>x.SolutionsInvalid)
                  .AddColumn("Exit", x=>x.Exit)
                  .AddColumn("Summary", x=>x.Summary)
                  .AddColumn("HasSolution", x=>x.HasSolution)
                  .RenderTo(multi, new MapToReportingRendererSingleDt(), Output);
            }
            
            
        </div>
        
        
    </div>
    
    @if (Model.RootForward != null)
     {
      
         

         var rep =MapToReporting.Create<SolverHelper.DepthLineItem>()
                       .AddColumn("Depth", x => x.Depth,  c=>c.Link((cell, item) => $"/Puzzle/NodeList/{Model.Puzzle.Ident}?token={Model.Token}&depth={cell.ValueInput}"))
                       .AddColumn("Total", x => x.Total,  c=>c.Link((cell, item) => $"/Puzzle/SolveNode/{Model.Puzzle.Ident}?token={Model.Token}&nodeid={item.Last?.SolverNodeId}"))
                       .AddColumn("UnEval", x => x.UnEval, c=>c.Link((cell, item) => $"/Puzzle/SolveNode/{Model.Puzzle.Ident}?token={Model.Token}&nodeid={item.LastUnEval?.SolverNodeId}"))
                       .AddColumn("Complete", x => (x.Total - x.UnEval) *100 / x.Total, c=>c.ColumnInfo.AsPercentage());

         var repStats = MapToReporting.Create<SolverStatistics>()
                                      .AddColumn("Name", x => x.Name)
                                      .AddColumn("Nodes", x => x.TotalNodes)
                                      .AddColumn("Speed", x => x.NodesPerSec, c=>c.ColumnInfo.Suffix = "/s")
             ;

         if (Model.RootForward != null)
         {
             var repF = SolverHelper.ReportDepth(Model.RootForward);
             <div class="col-4">
                 <h3>Forward Depth</h3>
                 
                 @{ rep.RenderTo(repF, new MapToReportingRendererHtml(new CellFormatter()), Output); }
            
                 
             </div>
         }
         if (Model.RootReverse != null)
         {
             var repR = SolverHelper.ReportDepth(Model.RootReverse);    
             <div class="col-4">
                 <h3>Reverse Depth</h3>
                 
                 @{ rep.RenderTo(repR, new MapToReportingRendererHtml(new CellFormatter()), Output); }
                 
        
             </div>
         }
         
    
     }
                 
               
    
   
</div>

<div class="row">
    <div class="col-6">
          
                              
              
    </div>
    <div class="col-6">

    </div>
</div>

@if (Model.IsRunning)
{
    <script>   setTimeout(function() {     location.reload();    }, 1000);</script>   
}
 



