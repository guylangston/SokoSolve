@using SokoSolve.Core.Reporting
@using SokoSolve.Core.Solver
@using SokoSolve.Core.Common
@using SokoSolve.Drawing
@using System.Numerics
@using SokoSolve.Drawing.SVG
@using TextRenderZ.Reporting
@using VectorInt
@model SokoSolve.Client.Web.Controllers.PuzzleController.NodeModel

@if (Model.Node.Parent != null)
{
    WriteLiteral($"<a href='/Puzzle/SolveNode/{Model.Solver.Puzzle.Ident}?token={Model.Solver.Token}&nodeid={Model.Node.Parent.SolverNodeId}'>Parent</a>");

    <span> </span>
    WriteLiteral($"<a href='/Puzzle/SolveMem/{Model.Solver.Puzzle.Ident}?token={Model.Solver.Token}&nodeid={Model.Node.Parent.SolverNodeId}'>Solver State</a>");
}
<h2>Solver Node:@Model.Node.SolverNodeId</h2>
<div class="row">
    <div class="col-4">
        @{
            MapToReporting.Create<SolverNode>()
                          .AddColumn("ParentId", x => x.Parent?.SolverNodeId ??0)
                          .AddColumn("SolverNodeId", x => x.SolverNodeId)
                          .AddColumn("Status", x => x.Status)
                          .AddColumn("Hash", x => x.GetHashCode())
                          .AddColumn("CrateMap Hash", x => $"{x.CrateMap.GetHashCode()} :: {x.CrateMap.GetType().Name}")
                          .AddColumn("MoveMap Hash", x => x.MoveMap.GetHashCode())
                          .AddColumn("PlayerBefore", x => x.PlayerBefore)
                          .AddColumn("PlayerAfter", x => x.PlayerAfter)
                          .AddColumn("CrateBefore", x => x.CrateBefore)
                          .AddColumn("CrateAfter", x => x.CrateAfter)
                          .AddColumn("Push", x => x.Push)
                          .AddColumn("Depth", x => x.GetDepth())
                          .AddColumn("Children", x => x.Children?.Count() ?? 0)
                          .RenderTo(Model.Node, new MapToReportingRendererSingleTable(), Output);
        }
        
    </div>
  
    <div class="col-8">
        @{
            var dia = new PuzzleDiagram()
            {
                CrateSvg = null,
                PlayerSvg = null,
                GetResource = x => "/img/"+x,
                
            };
            dia.GetOverlay = (t, r) =>
            {
                string s = "";
                if (Model.Node.CrateMap[t.Position])
                {
                    s += new ImageTag(r, dia.GetResource("crate.svg"));
                }
                if (Model.Node.MoveMap[t.Position])
                {
                    s += new RectTag(r).Style(new StyleTag().Fill(0, 180, 0).Opacity(0.4f));
                }
                if (Model.Solver.State?.StaticMaps?.DeadMap[t.Position] == true)
                {
                    var rr = Rect2.CenterAt(r.C, new Vector2(5));
                    s += new RectTag(rr).Style(new StyleTag().Fill(200, 0, 0));
                }
                return s;
            };
            dia.Draw(Output, Model.Solver.Puzzle.Puzzle, new Vector2(25));
        }
    </div>
</div>


@{
    
    new MapToReporting<SolverNode>()
        .AddColumn("SolverNodeId", x => $"<a href='/Puzzle/SolveNode/{Model.Solver.Puzzle.Ident}?token={Model.Solver.Token}&nodeid={x.SolverNodeId}'>{x.SolverNodeId}</a>" )
        .AddColumn("PlayerBefore", x => x.PlayerBefore)
        .AddColumn("Push", x => x.Push)
        .AddColumn("Status", x => x.Status)
        .AddColumn("Kids", x => x.Children.Count())
        .AddColumn("Hash", x => x.GetHashCode())
        .RenderTo(
            Model.Node.Children, 
            new MapToReportingRendererHtml(), 
            Output);
}

<div class="w-100" style="overflow: scroll; max-height: 50vh;">
<img src="/Puzzle/PathToRoot?token=@Model.Token&nodeid=@Model.NodeId"/>    
</div>
