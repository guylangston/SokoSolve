@using SokoSolve.Client.Web.Controllers
@using SokoSolve.Core.Common
@using SokoSolve.Core.Solver
@using TextRenderZ.Reporting
@using System.Xml
@model SokoSolve.Client.Web.Controllers.PuzzleController.HomeModel
@{
    var puz = Model.Puzzle.Puzzle;
}

<h2>@Model.Puzzle.Details.Name</h2>

<div class="row">
    <div class="col-6">
        <div class="card">
            <div class="card-body">
                <partial name="PuzzleMap" model="@puz"/>
                <hr/>
                <a asp-action="Play" asp-route-id="@Model.Puzzle.Ident">Play</a>
                <dl>
                    <dt>Size</dt>
                    <dd>@puz.Width x @puz.Height</dd>
                    
                    <dt>Solutions</dt>
                    <dd>@if (Model.Puzzle.Solution != null)
                        {
                            @Model.Puzzle.Solution
                        }
                        else
                        {
                            <text>NONE</text>
                        }
                    </dd>
                    
                    <dt>Author</dt>
                    <dd>@(Model.Puzzle.Details.Author ?? "~")</dd>
                </dl>
            </div>
        </div>
          
        @if (Model.Solutions != null && Model.Solutions.Any(x=>x.HasSolution))
        {
            <table class="table table-sm">
                <thead>
                <tr>
                    <th>Nodes</th>
                    <th>Time</th>
                    
                    <th>Machine</th>
                    <th>Path Len</th>
                    @* <th>Solver</th> *@
                </tr>
                </thead>
                @foreach (var s in Model.Solutions.Where(x=>x.HasSolution))
                {
                    <tr>
                        <td title="@s.Created, @s.Author"><a asp-action="Solution" asp-route-puzzle="@s.PuzzleIdent" asp-route-sid="@s.SolutionId">@s.SolutionId</a> </td>
                        <td>@s.TotalNodes.ToString("#,##0")</td>
                        <td>@TimeSpan.FromSeconds(s.TotalSecs).Humanize()</td>

                        <td title="@s.MachineCPU, @s.SolverType ">@s.MachineName</td>
                        <td> @s.Path?.Length</td>
                        <td><input type="text" readonly="readonly" value="@s.Path"/> </td>

                    </tr>
                }
            </table>
        }
        
         @if (Model.Solutions != null && Model.Solutions.Any(x=>!x.HasSolution))
                {
                    <h2>Attempts</h2>
                    <table class="table table-sm">
                        <thead>
                        <tr>
                            <th>Nodes</th>
                            <th>Time</th>
                            
                            <th>Machine</th>
                            @* <th>Solver</th> *@
                        </tr>
                        </thead>
                        @foreach (var s in Model.Solutions.Where(x=>!x.HasSolution))
                        {
                            <tr>
                                <td>@s.TotalNodes.ToString("#,##0")</td>
                                <td>@TimeSpan.FromSeconds(s.TotalSecs).Humanize()</td>
                                <td title="@s.MachineCPU, @s.SolverType ">@s.MachineName</td>
                                @* <td title="@s.SolverDescription">@s.SolverType</td> *@
                            </tr>
                        }
                    </table>
                }
    </div>
    
    <div class="col-3">
        
        

      
        
        @*          @{ *@
        @*              MapToReporting.Create<ExitConditions>() *@
        @*                            .AddColumns() *@
        @*                            .CodeGen(Output, new CodeGenBootstrapForm<ExitConditions>()); *@
        @*          } *@
        
            <form role="form" method="get" action="@Url.Action("SolveStart")">
                <input type="hidden" name="id" value="@Model.Puzzle.Ident"/>
                
                @* <div class="form-group"> *@
                @*     <label for="ele-TotalNodes">Total Nodes</label> *@
                @*     <input type="number" class="form-control" id="ele-TotalNodes" name="TotalNodes" placeholder=""> *@
                @* </div> *@
                @* <div class="form-group"> *@
                @*     <label for="ele-TotalDead">Total Dead</label> *@
                @*     <input type="number" class="form-control" id="ele-TotalDead" name="TotalDead" placeholder=""> *@
                @* </div> *@
                <div class="form-group">
                    <label for="ele-Duration">Duration (min)</label>
                    <input type="text" class="form-control" id="ele-Duration" name="Duration" value="1" placeholder="">
                </div>
                <div class="form-group">
                    <label for="ele-StopOnSolution">Stop On Solution</label>
                    <input type="checkbox"  id="ele-StopOnSolution" name="StopOnSolution" checked="checked"  value="true" placeholder="">
                </div>
                
                
                <div class="form-group">
                    <label for="ele-Duration">Solver</label>
                    @Html.DropDownList("Solver", DisplayHelper.ToSelectList(BatchSolveComponent.SolverFactory.GetAllKeys(), x=>(x, x), BatchSolveComponent.SolverFactoryDefault), null, new {@class="form-control"})
                </div>
                <div class="form-group">
                    <label for="ele-Duration">Node Lookup</label>
                    @Html.DropDownList("Lookup", DisplayHelper.ToSelectList(BatchSolveComponent.LookupFactory.GetAllKeys(), x=>(x, x), BatchSolveComponent.LookupFactoryDefault), null, new {@class="form-control"})
                </div>
                
                @* <div class="form-group"> *@
                @*     <label for="ele-MemAvail">Mem Avail</label> *@
                @*     <input type="number" class="form-control" id="ele-MemAvail" name="MemAvail" placeholder=""> *@
                @* </div> *@
                @* <div class="form-group"> *@
                @*     <label for="ele-MemUsed">Mem Used</label> *@
                @*     <input type="number" class="form-control" id="ele-MemUsed" name="MemUsed" placeholder=""> *@
                @* </div> *@

                <input type="submit" class="btn btn-primary" value="Start Solver"/>
                
            </form>
        
    </div>
</div>

<partial name="StaticAnalysis" model="@Model"/>





